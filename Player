public class Player extends Character{
    // The Character that the user will control

    // Instance Variables


    private boolean jumpStatus = true; // If true the Player is able to call the Jump method
    private boolean dashStatus = true; // If true the Player is able to call the Dash Method
    private boolean crouchStatus = false; // For future implementation; dashing while crouched will result in a side where the players hit box should be halved

    // These will always belong to the Class ----> Potentially modified by POWER_UPS and ITEMS
    private static final double JUMP_HEIGHT = 4.0;
    private static final double ABILITY_SPEED = 1.0; // This value is used for the ability functions to change the speed at which a player completes a jump/dash
    private static final double DASH_LENGTH = 5.0;
    private static final double PLAYER_SPEED = 1.0;

    private String playerDirection = "RIGHT"; // "LEFT" = A   "RIGHT" = D





    // Constructor

    public Player(Character original) {
        // Takes a Character obj and makes it a Player obj
        super(original);

    }

    public Player(){
        // Default constructor of a Player Obj
        super(); // Call the superclass constructor first
    }

    // Methods

    // Getters

    public boolean getJumpStatus(){
        // Returns the value of jumpStatus
        return jumpStatus;
    }
    public boolean getDashStatus(){
        // Returns the value of dashStatus
        return dashStatus;
    }

    public double getPLAYER_SPEED(){
        //Returns the Players Speed value
        return PLAYER_SPEED;

    }
    public boolean getCrouchStatus() {
        // Return the player crouch Status
        return crouchStatus;
    }

    public String getPlayerDirection(){
        // Return the player playerDirection
        return playerDirection;
    }




    // Setters

    public void setJumpStatus(boolean value){
        // Setting Jump Status
        this.jumpStatus = value;
    }

    public void setDashStatus(boolean value){
        // Setting Dash Status
        this.dashStatus = value;
    }

    public void setCrouchStatus(boolean crouchStatus) {
        this.crouchStatus = crouchStatus;
    }

    public void reverseCrouch() {
        // Reverses the state variable of any player type object

        if (this.crouchStatus) {
            this.crouchStatus = false;
        } else {
            this.crouchStatus = true;
        } //If state == true then {switch to false}else{switch to true}
    }

    public void setPlayerDirection(String direction){

        this.playerDirection = direction;
    }




    // Actions
    // KeyBoardInput class will use these methods

    public void jump(){
        // Current version of this method will instantly move the character to the y_cord + JUMP_HEIGHT... wait a bit and fall back down
        // Version with GUI should gradually raise the players Y value then gradually lower it
        // Currently we do not have ground so when if comes to the fall of the jump it will treat y_cord == 0.0 as the ground

        if (crouchStatus){return;} // Can't Jump while crouching so we just return

        double perTick = ABILITY_SPEED / JUMP_HEIGHT; // This is the value we need to add to the players cords each loop
        double initialY = this.getY();


        while (this.getY() < initialY + JUMP_HEIGHT ){
            // This will loop until the player object's current Y value is equal to or greater than the objects initial Y + JUMP_HEIGHT
            // The rising action of a jump
            // Each loop of this will update the players location gradually upward
            // The value for ABILITY_SPEED; if higher will complete the jump action faster in less frames / Increments

            this.incrementY(perTick);
            System.out.println(this.getName() + "'s current coordinates are: " + this.getCords()); // This is just used for demo purposes in the full game this should display the player on the screen with the new cords

        }

        while (this.getY() > 0.0){
            // Falling action of a jump

            this.incrementY(-perTick);
            System.out.println(this.getName() + "'s current coordinates are: " + this.getCords());

        }
    }


    public void dash(String direction){
        // Potential for KeyBoardInput interaction will allow a player to choose which way to dash
        // Changes the current position of the player with respect to the x_cord after using the dash facing left or right
        if (playerDirection.toUpperCase().equals("RIGHT")) { this.incrementX(DASH_LENGTH); }
        if (playerDirection.toUpperCase().equals("LEFT")) { this.incrementX(-DASH_LENGTH); }

        /* Changes the current position of the player with respect of the y_cord after using the dash while in air (Usable as a form of double jump)
        if (playerDirection.toUpperCase().equals("UP")) { this.incrementY(DASH_LENGTH); }

            This was meant for a potential jump dash combo but we will instead just implement a double jump
         */
    }


    public void moveRight() {
        // This will take the objects x_cord and move it according to the Player speed to the right

        this.incrementX(PLAYER_SPEED);
        this.setPlayerDirection("RIGHT");
    }


    public void moveLeft() {
        // This will like the above method simply add the PLAYER_SPEED to the objects x_cords value
        this.incrementX(-PLAYER_SPEED);
        this.setPlayerDirection("LEFT");
    }
}

