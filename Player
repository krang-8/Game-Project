public class Player extends Character{
    // The Character that the user will control

                                                      // Instance Variables


    private boolean jumpStatus = true; // If true the Player is able to call the Jump method
    private boolean dashStatus = true; // If true the Player is able to call the Dash Method

    // These will always belong to the Class ----> Potentially modified by POWERUPS and ITEMS
    private static final double JUMPHEIGHT = 4.0;
    private static final double ABILITYSPEED = 0.5; // This value is used for the ability functions to change the speed at which a player completes a jump/dash
    private static final double DASHLENGTH = 5.0;
    private static final double PLAYERSPEED = 1.0;






                                                     // Constructor

    public Player(Character original) {
        // Takes a Character obj and makes it a Player obj
        super(original);

    }

    public Player(String name){
        // Default constructor of a Player Obj

        super(name); // Call the superclass constructor first
    }

                                                    // Methods

                                                    // Getters

    public boolean getJumpStatus(){
        // Returns the value of jumpStatus
        return jumpStatus;
    }
    public boolean getDashStatus(){
        // Returns the value of dashStatus
        return dashStatus;
    }

    public double getPLAYERSPEED(){
        //Returns the Players Speed value
        return PLAYERSPEED;

    }


                                                    // Setters

    public void setJumpStatus(boolean value){
        // Setting Jump Status
        this.jumpStatus = value;
    }

    public void setDashStatus(boolean value){
        // Setting Dash Status
        this.dashStatus = value;
    }




                                                      // Actions
        // KeyBoardInput class will use these methods

    public void jump(){
        // Current version of this method will instantly move the character to the Ycord + JUMPHEIGHT... wait a bit and fall back down
        // Version with GUI should gradually raise the players Y value then gradually lower it
        // Currently we do not have ground so when if comes to the fall of the jump it will treat 0 as the ground


        double perTick = ABILITYSPEED / JUMPHEIGHT; // This is the value we need to add to the players coords each loop
        double initialY = this.getY();


        while (this.getY() < initialY + JUMPHEIGHT ){
            // This will loop until the player object's current Y value is equal to or greater than the objects initial Y + JUMPHEIGHT
            // The rising action of a jump
            // Each loop of this will update the players location gradually upward
            // The value for ABILITYSPEED; if higher will complete the jump action faster in less frames / Increments

            this.incrementY(perTick);
            System.out.println(this.getName() + "'s current coordinates are: " + this.getCords()); // This is just used for demo purposes in the full game this should display the player on the screen with the new coords

        }

        while (this.getY() > 0.0){
            // Falling action of a jump

            this.incrementY(-perTick);
            System.out.println(this.getName() + "'s current coordinates are: " + this.getCords());

        }
    }

    public void dash(String direction){
        // Potential for KeyBoardInput interaction will allow a player to choose which way to dash
        // Changes the current position of the player with respect to the x_cord after using the dash facing left or right
        if (direction.toUpperCase() == "RIGHT") { this.incrementX(DASHLENGTH); }
        if (direction.toUpperCase() == "LEFT") { this.incrementX(-DASHLENGTH); }
        
        // Changes the current position of the player with respect of the y_cord after using the dash while in air (Usable as a form of double jump)
        if (direction.toUpperCase() == "UP") { this.incrementY(DASHLENGTH); }

    }

    public void moveRight() {
        // This will take the objects x_cord and move it according to the Player speed to the right

        this.incrementX(PLAYERSPEED);
    }


    public void moveLeft() {
        // This will like the above method simply add the PLAYERSPEED to the objects y_cords value

        this.incrementX(-PLAYERSPEED);
    }

}
